//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlyerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlyerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlyerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlyerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b13d865e-deb6-4606-b386-291471395588"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c3375d74-dc27-4c4a-b66d-6f810deac0f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""93dcd748-7d8c-41e7-951a-1502e7b4b384"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a8b78afe-4327-48ea-ab4f-ddb0c3ed8290"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""4a341e57-d021-4c7f-a949-0049af8688d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""08c8ca19-6f25-49e6-b509-01a1fd80a8ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hit"",
                    ""type"": ""Button"",
                    ""id"": ""5c1738be-bb66-4ded-8bfd-5b52cd192469"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46a0f130-8b6e-4a94-846e-18a2947413f5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""addc0e77-ad5a-42dd-bca0-32b989ac4a30"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""061707b0-9cca-4b3a-a97c-b837ef759589"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76bb0edb-5d58-4af6-9671-5ce5238c24cf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c3c6b4b8-b3b5-4867-8625-0ceee1662999"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8a5f4642-52ab-4f41-9535-57cab122695e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90e7bff4-d833-4423-b14c-f252da1581a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee804eee-f3ea-49cb-bda5-2da6478eb95b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2843a168-05ca-40a5-8840-6b04e1337429"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""JOY"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea34f6ca-bcee-4143-8655-488086b4716a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a39e6b98-e587-4e57-9874-8189834d3afd"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9614327-76d7-4e51-aad5-b0af65097889"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9fb852e-51b6-4eb6-9f82-e5499aa0e0fa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6a96d11-1533-4be6-bfe2-aeea174e5356"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fd7aef9-a152-4e54-96e1-ddc4b1739ce4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MedusaMiniGame"",
            ""id"": ""3abb18b4-b8bf-4b01-a4b6-7d140004d99d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1f64d383-4c2d-42fd-ba12-3f1c222b8655"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b7c2b05f-8159-45b0-9ef4-21d5594015a0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""65985a78-f759-42fa-9b5b-a38fc4db69b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69475a48-180a-4259-828c-63b2bbf68b0e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03a988f6-fecc-4739-8396-0ee10e4f9713"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5eb95f09-98fe-41d4-a509-780942bc885f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MazeMiniGame"",
            ""id"": ""620d2000-bcb7-449c-90fb-4faf34ae1616"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f07a9c47-887b-4f42-8f44-979b7bd5b252"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84cc9b25-7507-4ae0-b2fc-e137c38c866b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90fb01ae-f8e5-41fb-90df-260243a25087"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MythMinigame"",
            ""id"": ""a12207e5-61b8-4630-b9f9-5c28b9f3cd3f"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f07506b6-0e1c-4c02-b979-ba4a81d7d295"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""2df53032-aa56-4c75-89ab-80977c339f86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""c0e682c0-edf4-487c-abd4-5db8822bd635"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""3ffebcc4-369d-408e-9ff0-f781c06dab55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""62bcdd0e-4839-44ee-a30e-5356e6b8f3e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""3203f994-2d88-4324-a098-fffaa97ac102"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d208fb1-5315-4f2a-a86d-c9e5ea50c0f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""140a65f2-1dde-48d2-9605-ed9bc890fcd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc90f674-eda9-489b-a435-b933cd8a40ef"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e8d3129-8257-47b0-a636-4f200ad29082"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5804474e-e181-4fb0-8d1c-4ff18ff8c860"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""762bdc61-9d92-4f3b-87ad-06a43664db62"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceaf7680-ba3d-4f3e-8bae-dcb0440ae22b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""JOY"",
            ""bindingGroup"": ""JOY"",
            ""devices"": [
                {
                    ""devicePath"": ""<HID::Twin USB Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<HID::TwiB USB Jocsti>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Interaction = m_Player.FindAction("Interaction", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Hit = m_Player.FindAction("Hit", throwIfNotFound: true);
        // MedusaMiniGame
        m_MedusaMiniGame = asset.FindActionMap("MedusaMiniGame", throwIfNotFound: true);
        m_MedusaMiniGame_Movement = m_MedusaMiniGame.FindAction("Movement", throwIfNotFound: true);
        // MazeMiniGame
        m_MazeMiniGame = asset.FindActionMap("MazeMiniGame", throwIfNotFound: true);
        m_MazeMiniGame_Movement = m_MazeMiniGame.FindAction("Movement", throwIfNotFound: true);
        // MythMinigame
        m_MythMinigame = asset.FindActionMap("MythMinigame", throwIfNotFound: true);
        m_MythMinigame_Left = m_MythMinigame.FindAction("Left", throwIfNotFound: true);
        m_MythMinigame_Right = m_MythMinigame.FindAction("Right", throwIfNotFound: true);
        m_MythMinigame_Up = m_MythMinigame.FindAction("Up", throwIfNotFound: true);
        m_MythMinigame_Down = m_MythMinigame.FindAction("Down", throwIfNotFound: true);
        m_MythMinigame_Select = m_MythMinigame.FindAction("Select", throwIfNotFound: true);
        m_MythMinigame_Close = m_MythMinigame.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Interaction;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Hit;
    public struct PlayerActions
    {
        private @PlyerInputActions m_Wrapper;
        public PlayerActions(@PlyerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Interaction => m_Wrapper.m_Player_Interaction;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Hit => m_Wrapper.m_Player_Hit;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Interaction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteraction;
                @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Hit.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHit;
                @Hit.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHit;
                @Hit.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHit;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Hit.started += instance.OnHit;
                @Hit.performed += instance.OnHit;
                @Hit.canceled += instance.OnHit;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MedusaMiniGame
    private readonly InputActionMap m_MedusaMiniGame;
    private IMedusaMiniGameActions m_MedusaMiniGameActionsCallbackInterface;
    private readonly InputAction m_MedusaMiniGame_Movement;
    public struct MedusaMiniGameActions
    {
        private @PlyerInputActions m_Wrapper;
        public MedusaMiniGameActions(@PlyerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MedusaMiniGame_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MedusaMiniGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MedusaMiniGameActions set) { return set.Get(); }
        public void SetCallbacks(IMedusaMiniGameActions instance)
        {
            if (m_Wrapper.m_MedusaMiniGameActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MedusaMiniGameActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MedusaMiniGameActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MedusaMiniGameActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_MedusaMiniGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public MedusaMiniGameActions @MedusaMiniGame => new MedusaMiniGameActions(this);

    // MazeMiniGame
    private readonly InputActionMap m_MazeMiniGame;
    private IMazeMiniGameActions m_MazeMiniGameActionsCallbackInterface;
    private readonly InputAction m_MazeMiniGame_Movement;
    public struct MazeMiniGameActions
    {
        private @PlyerInputActions m_Wrapper;
        public MazeMiniGameActions(@PlyerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MazeMiniGame_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MazeMiniGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MazeMiniGameActions set) { return set.Get(); }
        public void SetCallbacks(IMazeMiniGameActions instance)
        {
            if (m_Wrapper.m_MazeMiniGameActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MazeMiniGameActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MazeMiniGameActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MazeMiniGameActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_MazeMiniGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public MazeMiniGameActions @MazeMiniGame => new MazeMiniGameActions(this);

    // MythMinigame
    private readonly InputActionMap m_MythMinigame;
    private IMythMinigameActions m_MythMinigameActionsCallbackInterface;
    private readonly InputAction m_MythMinigame_Left;
    private readonly InputAction m_MythMinigame_Right;
    private readonly InputAction m_MythMinigame_Up;
    private readonly InputAction m_MythMinigame_Down;
    private readonly InputAction m_MythMinigame_Select;
    private readonly InputAction m_MythMinigame_Close;
    public struct MythMinigameActions
    {
        private @PlyerInputActions m_Wrapper;
        public MythMinigameActions(@PlyerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_MythMinigame_Left;
        public InputAction @Right => m_Wrapper.m_MythMinigame_Right;
        public InputAction @Up => m_Wrapper.m_MythMinigame_Up;
        public InputAction @Down => m_Wrapper.m_MythMinigame_Down;
        public InputAction @Select => m_Wrapper.m_MythMinigame_Select;
        public InputAction @Close => m_Wrapper.m_MythMinigame_Close;
        public InputActionMap Get() { return m_Wrapper.m_MythMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MythMinigameActions set) { return set.Get(); }
        public void SetCallbacks(IMythMinigameActions instance)
        {
            if (m_Wrapper.m_MythMinigameActionsCallbackInterface != null)
            {
                @Left.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnRight;
                @Up.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnDown;
                @Select.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnSelect;
                @Close.started -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_MythMinigameActionsCallbackInterface.OnClose;
            }
            m_Wrapper.m_MythMinigameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
            }
        }
    }
    public MythMinigameActions @MythMinigame => new MythMinigameActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_JOYSchemeIndex = -1;
    public InputControlScheme JOYScheme
    {
        get
        {
            if (m_JOYSchemeIndex == -1) m_JOYSchemeIndex = asset.FindControlSchemeIndex("JOY");
            return asset.controlSchemes[m_JOYSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnHit(InputAction.CallbackContext context);
    }
    public interface IMedusaMiniGameActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMazeMiniGameActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMythMinigameActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
    }
}
